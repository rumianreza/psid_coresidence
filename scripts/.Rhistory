install.packages(tidyverse)
install.packages("tidyverse")
gc()
##Applications
N=4
UNTSystem = matrix(0,nrow=N,ncol=3,byrow=F)
UNTSystem
UNTSystem[1,1]= "UNT Denton"; UNTSystem[1,2]= -97.147852; UNTSystem[1,3]= 33.211371
UNTSystem[2,1]= "UNT Frisco"; UNTSystem[2,2]= -96.830204; UNTSystem[2,3]= 33.102276
UNTSystem[3,1]= "UNT HSC"; UNTSystem[3,2]= -97.369278; UNTSystem[3,3]= 32.750000
UNTSystem[4,1]= "UNT Dallas"; UNTSystem[4,2]= -96.803407; UNTSystem[4,3]= 32.659779
UNTLocation = matrix(0,nrow=N,ncol=2,byrow=F)
UNTLocation
UNTLocation[,1]= UNTSystem[,2]
UNTLocation[,2]= UNTSystem[,3]
S=1
AirportLocation <- matrix(nrow=S, ncol =2, byrow= FALSE)
for (n in 1:S){
print(n)
AirportLocation[n,2]= 32.897778 # This is the center of DFW Airport; Latitude
AirportLocation[n,1]= -97.040353 #Longitude
}
AirportLocation
UNTLocation
libary(geosphere)
library(geosphere)
distance = distm(UNTLocation,AirportLocation,fun=distHaversine)/1000
?distm
distm
UNTSystem
UNTLocation
AirportLocation
distance = distm(as.numeric(UNTLocation),AirportLocation,fun=distHaversine)/1000
as.numeric(UNTLocation)
UNTLocation
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
distance = distm(UNTLocation,AirportLocation,fun=distHaversine)/1000
UNTLocation
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation
UNTSystem[,3]
UNTSystem[,2]
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTSystem[.2]
UNTSystem[,2]
as.integer(UNTSystem[,2])
as.numeric(UNTSystem[,2])
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation
UNTLocation <- as.data.frame(UNTLocation)
UNTLocation
UNTLocation
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation
UNTLocation = matrix(0,nrow=N,ncol=2,byrow=F)
UNTLocation
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation
UNTLocation = matrix(0,nrow=N,ncol=2,byrow=F)
UNTLocation
##Applications
N=4
UNTSystem = matrix(0,nrow=N,ncol=3,byrow=F)
UNTSystem
UNTSystem[1,1]= "UNT Denton"; UNTSystem[1,2]= -97.147852; UNTSystem[1,3]= 33.211371
UNTSystem[2,1]= "UNT Frisco"; UNTSystem[2,2]= -96.830204; UNTSystem[2,3]= 33.102276
UNTSystem[3,1]= "UNT HSC"; UNTSystem[3,2]= -97.369278; UNTSystem[3,3]= 32.750000
UNTSystem[4,1]= "UNT Dallas"; UNTSystem[4,2]= -96.803407; UNTSystem[4,3]= 32.659779
UNTLocation = matrix(0,nrow=N,ncol=2,byrow=F)
UNTLocation
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation
##Applications
N=4
UNTSystem = matrix(0,nrow=N,ncol=3,byrow=F)
UNTSystem
UNTSystem[1,1]= "UNT Denton"; UNTSystem[1,2]= -97.147852; UNTSystem[1,3]= 33.211371
UNTSystem[2,1]= "UNT Frisco"; UNTSystem[2,2]= -96.830204; UNTSystem[2,3]= 33.102276
UNTSystem[3,1]= "UNT HSC"; UNTSystem[3,2]= -97.369278; UNTSystem[3,3]= 32.750000
UNTSystem[4,1]= "UNT Dallas"; UNTSystem[4,2]= -96.803407; UNTSystem[4,3]= 32.659779
UNTLocation = matrix(0,nrow=N,ncol=2,byrow=F)
UNTLocation
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation
S=1
AirportLocation <- matrix(nrow=S, ncol =2, byrow= FALSE)
for (n in 1:S){
print(n)
AirportLocation[n,2]= 32.897778 # This is the center of DFW Airport; Latitude
AirportLocation[n,1]= -97.040353 #Longitude
}
distance <- matrix(0, nrow=S, ncol =N, byrow= FALSE)
library(geosphere)
distance = distm(UNTLocation,AirportLocation,fun=distHaversine)/1000
distance
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation <- as.data.frame(UNTLocation)
##Applications
N=4
UNTSystem = matrix(0,nrow=N,ncol=3,byrow=F)
UNTSystem
UNTSystem[1,1]= "UNT Denton"; UNTSystem[1,2]= -97.147852; UNTSystem[1,3]= 33.211371
UNTSystem[2,1]= "UNT Frisco"; UNTSystem[2,2]= -96.830204; UNTSystem[2,3]= 33.102276
UNTSystem[3,1]= "UNT HSC"; UNTSystem[3,2]= -97.369278; UNTSystem[3,3]= 32.750000
UNTSystem[4,1]= "UNT Dallas"; UNTSystem[4,2]= -96.803407; UNTSystem[4,3]= 32.659779
UNTLocation = matrix(0,nrow=N,ncol=2,byrow=F)
UNTLocation
UNTLocation[,1]= UNTSystem[,2]
UNTLocation[,2]= UNTSystem[,3]
S=1
AirportLocation <- matrix(nrow=S, ncol =2, byrow= FALSE)
for (n in 1:S){
print(n)
AirportLocation[n,2]= 32.897778 # This is the center of DFW Airport; Latitude
AirportLocation[n,1]= -97.040353 #Longitude
}
distance <- matrix(0, nrow=S, ncol =N, byrow= FALSE)
distance = distm(UNTLocation,AirportLocation,fun=distHaversine)/1000
library(geosphere)
distance
distance = distm(UNTLocation,AirportLocation,fun=distHaversine)/1000
UNTLocation
as.data.frame(UNTLocation)
distance = distm(as.data.frame(UNTLocation),AirportLocation,fun=distHaversine)/1000
AirportLocation
as.data.frame(UNTLocation)
distance = distm(as.data.frame(UNTLocation),AirportLocation,fun=distHaversine)/1000
UNTLocation
UNTLocation <- as.data.frame(UNTLocation)
distance = distm(UNTLocation,AirportLocation,fun=distHaversine)/1000
?matrix
UNTLocation
?distm
class(UNTLocation)
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation <- as.data.frame(UNTLocation)
UNTLocation = matrix(0,nrow=N,ncol=2,byrow=F)
UNTLocation
UNTLocation[,1]= as.numeric(UNTSystem[,2])
UNTLocation[,2]= as.numeric(UNTSystem[,3])
UNTLocation <- as.data.frame(UNTLocation)
S=1
AirportLocation <- matrix(nrow=S, ncol =2, byrow= FALSE)
for (n in 1:S){
print(n)
AirportLocation[n,2]= 32.897778 # This is the center of DFW Airport; Latitude
AirportLocation[n,1]= -97.040353 #Longitude
}
distance <- matrix(0, nrow=S, ncol =N, byrow= FALSE)
library(geosphere)
distance = distm(UNTLocation,AirportLocation,fun=distHaversine)/1000
UNTLocation
distance
library(osrm) # Calculates time AND distance
?osrmTable
curve(x^2-6, from = -10, to = 10)
curve(x^2-6, from = -5, to = 5)
curve(sin(x), from -5, to = 5)
curve(sin(x), from=-5, to = 5)
a <- seq(-5, 5, 1000)
sin_a <- sin(a)
sin_a
a
a
a <- seq(0, 1, 10)
a <- seq(0, 1,length.out= 10)
a <- seq(-5, 5, 1000)
a <- seq(-5, 5,length.out= 1000)
sin_a <-sin(a)
cos_a <- cos(a)
plot(x=sin_a, y=cos_a)
f_a <- a^2 - 6
f_a_d1 <- 2*a
plot(x-f_a, y=f_a_d1)
plot(x=f_a, y=f_a_d1)
a <- (0, 5, 1000)
a <- seq(0, 5, length.out = 100)
f_a <- a^2 - 6
f_ad1 <- 2*a
plot(x=f_a, y = f_ad1)
4+6+10+2+8+12
200-42
3+3+2+8+1+4+2+2+8+8
41+6+1+12+12
200-72
20+14+14+10+30+18+20+12+18
3+5+8+5+2+2+16+7+12+12
20+12+16+9+6+17+20+20+16
20+12+16+9+6+17+20+20+16
18+16+17+14+30+14+12+14+30
20+12+17+7+25+15+20+10+18
20+14+16+8+25+6+14+12+26+
0
16+7+16+6+30+8+16+9+16
18+6+8+9+30+20+18+19+30
16+6+14+12+30+8+16+16+30
16+6+17+4+30+8+16+20+20
24+6+30+17+14+7+8+0
20+8+16+6+30+17+14+7+8
20+6+9+3+5+9+7+2+9
70/200
18+8+17+10+5+16+18+11+11
170/200
150/200
160/200
q()
# Packages
library(openxlsx); library(dplyr); library(tidyr); library(magrittr)
###############################################################################
### WORKING DIRECTORY #########################################################
cd <- file.path ("C:", "Users", "Owner", "Dropbox",
"Fall 2021", "ECON 5655", "project", "scripts", fsep = "/")
setwd(cd)
###############################################################################
###############################################################################
### R SCRIPT AUTHOR: Rumian Reza // rumian.reza@unt.edu
### PURPOSE: Import from PSID Data Center download, then convert
# raw files to be in long format (i.e., rows uniquely identified
# by ID-year combo.) Clean/define/re-define each annually-related PSID variable.
### DATE CREATED: Nov 10 2021
### NOTES:
# QUESTION: Do Data Center downloads automatically merge family-level
# data with individual-level data (when data at both levels are present)?
# ANSWER: Yes!
### CHANGES:
###############################################################################
###############################################################################
### FILES THIS R SCRIPT USES (INPUT)
input_dir1 <- file.path("C:", "Users", "Owner", "Dropbox", "Fall 2021",
"ECON 5655", "project", "data","PSID_variablenames",
fsep = "/")
input_dir2 <- file.path("C:", "Users", "Owner", "Dropbox", "Fall 2021",
"ECON 5655", "project", "data", "PSID_datacenter",
"J299783_VariableList_v1",
fsep = "/")
input_dir3 <- file.path("C:", "Users", "Owner", "Dropbox", "Fall 2021",
"ECON 5655", "project", "data", "PSID_datacenter",
"J299788_SummaryVariables_v1",
fsep = "/")
state_codes_dir <- file.path("C:", "Users", "Owner", "Dropbox", "Fall 2021",
"ECON 5655", "project", "data", fsep = "/")
varlist <- read.csv(paste(input_dir1, "VariableList_v1.csv", sep = "/"))
vars1 <- read.xlsx(paste(input_dir2, "J299783.xlsx", sep = "/"),
sheet = 1, startRow = 1, colNames = T,
rowNames = F, detectDates = F, skipEmptyRows = F,
skipEmptyCols = F, na.strings = "NA",
fillMergedCells = F)
summa1 <- read.xlsx(paste(input_dir3, "J299788.xlsx", sep = "/"),
sheet = 1, startRow = 1, colNames = T,
rowNames = F, detectDates = F, skipEmptyRows = F,
skipEmptyCols = F, na.strings = "NA",
fillMergedCells = F)
###############################################################################
### FILES THIS R SCRIPT CREATES (OUTPUT)
output_dir1 <- file.path("C:", "Users", "Owner", "Dropbox", "Fall 2021",
"ECON 5655", "project", "data",fsep = "/")
############################################################################
dfnames <- data.frame(names(vars1))
names(dfnames) <- "names"
# Identify imported PSID variables that weren't in the variable list.
non_list <- anti_join(dfnames, varlist, by = "names")
non_list
vars1 |>
mutate(id = ER30001*1000 + ER30002, .keep = "unused") %>%
select(-c(ER21001, ER25001, ER36001, ER42001,
ER47301, ER30000)) -> vars2
vars1 |>
mutate(id = ER30001*1000 + ER30002, .keep = "unused") |>
select(-c(ER21001, ER25001, ER36001, ER42001,
ER47301, ER30000)) -> vars2
# Initialize data frame to be merged with cleaned variables.
df1 <- data.frame(vars2$id) |> rename(id = vars2.id)
varlist |>
filter(vars == "Age") -> a
View(varlist)
varlist |>
filter(vars == "Age") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
dft1 |>
pivot_longer(cols = starts_with("2"), names_to = "wave") -> dft2
varlist |>
filter(vars == "Age") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
dft2 |>
mutate(age = if_else(value < 120, value, 0, missing = NULL)) |>
select(-value) -> dft3
df1 <- left_join(df1, dft3, by = "id")
a <- varlist |> filter(vars == "Education")
dft1 <- vars2 |> select(id, a$names)
names(dft1) <- c("id", a$waves)
dft2 <- dft1 |> pivot_longer(cols = starts_with("2"),
names_to = "wave")
# How many values should we consider?
table(dft2$value)
dft2 |>
mutate(educ_na = as.integer(is.na(value)),
hs_grad = as.integer(value >= 12),
some_coll = as.integer(value >= 13 & value <= 15),
coll_grad = as.integer(value >= 16),
grad_school = as.integer(value == 17),
educ = if_else(value <= 17, value, 0,NULL)) |>
select(-value) -> dft3
df1 <- left_join(df1, dft3, by = c("id", "wave"))
varlist |>
filter(vars == "EmploymentStatus") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
dft1 |>
pivot_longer(cols = starts_with("2"), names_to = "wave") -> dft2
# How many values should we consider?
table(dft2$value)
dft2 |>
mutate(emp_na = as.integer(is.na(value)),
employed = as.integer(value == 1),
laid_off = as.integer(value == 2),
job_search = as.integer(value == 3),
retired = as.integer(value == 4),
disabled = as.integer(value == 5),
student = as.integer(value == 7)) |>
select(-value) -> dft3
df1 <- left_join(df1, dft3, by = c("id", "wave"))
###############################################################################
###### MARITAL STATUS #########################################################
varlist |>
filter(vars == "MarriedPairsIndicator") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
dft1 |>
pivot_longer(cols = starts_with("2"), names_to = "wave") -> dft2
# How many values should we consider?
table(dft2$value, dft2$wave)
dft2 |>
mutate(married_na = as.integer(is.na(value)),
married = as.integer(value > 0)) |>
select(-value) -> dft3
df1 <- left_join(df1, dft3, by = c("id", "wave"))
###############################################################################
###### RELATIONSHIP TO HEAD ###################################################
varlist |>
filter(vars == "RelationshipToHead") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
dft1 |>
pivot_longer(cols = starts_with("2"), names_to = "wave") -> dft2
# How many values should we consider?
table(dft2$value)
dft2 |>
mutate(hd_FU = as.integer(value == 10),
spouse_FU = as.integer(value %in% c(20, 90)),
hd_spouse_FU = as.integer(value %in% c(10,20,90)),
cohab_FU = as.integer(value %in% c(20,90,22,88)),
child_hd_FU = as.integer(value %in% c(30,33,37,38)),
parent_hd_FU = as.integer(value %in% c(50,57,58))) |>
select(-value) -> dft3
### NOTE: This temporary data frame (dft3) will be used
# below in the variables pertaining to RACE. Therefore, I
# preserve this data frame in the next line of code.
df_rel_to_head <- dft3
df1 <- left_join(df1, dft3, by = c("id", "wave"))
summa1 |>
mutate(id= ER30001*1000 + ER30002, .keep = "unused") |>
select(-ER30000) |>
mutate(female = as.integer(ER32000 == 2),
mom_id = as.integer(ER32009*1000 + ER32010),
dad_id = as.integer(ER32016*1000 + ER32017)) |>
rename(sample_or_not = ER32006) |>
select(-starts_with("ER")) -> summa2
df1 <- left_join(df1, summa2, by = "id")
varlist |>
filter(vars == "ChildcareExpenditures") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
varlist |>
filter(vars == "ChildcareExpenditures") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
dft1 |>
pivot_longer(cols = starts_with("2"), names_to = "wave") -> dft2
varlist |>
filter(vars == "ChildcareExpenditures") -> a
vars2 |>
select(id, a$names) -> dft1
names(dft1) <- c("id", a$waves)
dft1 |>
pivot_longer(cols = starts_with("2"), names_to = "wave") -> dft2
dft2 |>
mutate(child_exp_na = as.integer(is.na(value))) |>
rename(child_exp = value) |>
mutate(pos_child_exp = as.integer(child_exp > 0)) -> dft3
table(dft3$pos_child_exp, dft3$wave)
df1 <- left_join(df1, dft3, by = c("id", "wave"))
# Packages
library(openxlsx); library(dplyr); library(tidyr); library(lubridate)
###############################################################################
### WORKING DIRECTORY #########################################################
cd <- file.path ("C:", "Users", "rumia", "Dropbox",
"Fall 2021", "ECON 5655", "project", "scripts", fsep = "/")
setwd(cd)
###############################################################################
###############################################################################
### R SCRIPT AUTHOR: Rumian Reza // rumian.reza@unt.edu
### PURPOSE: Import Freddie Mac Housing Price Index (master file),
# calculate annual price index for each state, export results.
### DATE CREATED: Nov 13 2021
### NOTES:
### CHANGES:
###############################################################################
###############################################################################
### FILES THIS R SCRIPT USES (INPUT)
input_dir1 <- file.path("C:", "Users", "rumia", "Dropbox", "Fall 2021",
"ECON 5655", "project", "data", fsep = "/")
fm1 <- read.csv(paste(input_dir1, "fmhpi_master_file.csv", sep = "/"))
###############################################################################
